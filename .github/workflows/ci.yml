name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.17.3"
  OTP_VERSION: "27.0"

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          # Test on minimum supported versions
          - elixir: "1.14.5"
            otp: "25.0"
          # Test on latest stable
          - elixir: "1.17.3"
            otp: "27.0"
          # Test on upcoming versions
          - elixir: "1.18.0"
            otp: "27.1"
            experimental: true
        exclude: []
      fail-fast: false
    
    continue-on-error: ${{ matrix.experimental == true }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-
            ${{ runner.os }}-mix-
      
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      
      - name: Check unused dependencies
        run: mix deps.unlock --check-unused
      
      - name: Compile dependencies
        run: mix deps.compile
      
      - name: Compile project
        run: mix compile --warnings-as-errors
      
      - name: Run tests
        run: mix test
      
      - name: Run tests with coverage
        if: matrix.elixir == '1.17.3' && matrix.otp == '27.0'
        run: |
          mix test --cover --export-coverage default
          mix test.coverage
          
      - name: Check minimum coverage
        if: matrix.elixir == '1.17.3' && matrix.otp == '27.0'
        run: |
          # Extract coverage percentage and ensure it's above 80%
          coverage=$(mix test.coverage | grep "TOTAL" | awk '{print $2}' | sed 's/%//')
          if [ -z "$coverage" ]; then
            echo "Could not extract coverage percentage"
            exit 1
          fi
          echo "Coverage: ${coverage}%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage ${coverage}% is below minimum threshold of 80%"
            exit 1
          fi

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-quality-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-quality-
            ${{ runner.os }}-mix-
      
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      
      - name: Check formatting
        run: mix format --check-formatted
      
      - name: Run Credo
        run: mix credo --strict
      
      - name: Run Sobelow security analysis
        run: mix sobelow --config
      
      
      - name: Check documentation
        run: mix docs

  dialyzer:
    name: Dialyzer
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-dialyzer-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-dialyzer-
            ${{ runner.os }}-mix-
      
      - name: Restore PLT cache
        uses: actions/cache@v4
        with:
          path: priv/plts
          key: ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-
            ${{ runner.os }}-plt-
      
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      
      - name: Create PLTs directory
        run: mkdir -p priv/plts
      
      - name: Run dialyzer
        run: mix dialyzer

  check-hex-publish:
    name: Check Hex Package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      
      - name: Check package
        run: |
          mix hex.build